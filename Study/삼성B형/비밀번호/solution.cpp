// Problem
// 제출현황
// 채점결과
// 게시판
// Problem
// No. 1 비밀번호 맞추기
// 참여자 31 제출 44 배점 100
// Problem제출이력정답
// 시간 : 50개 테스트케이스를 합쳐서 C/C++의 경우 10초 / Java의 경우 10초
// 메모리 : 힙, 정적 메모리 합쳐서 256MB 이내, 스택 메모리 1MB 이내
// ※ SW expert 아카데미의 문제를 무단 복제하는 것을 금지합니다.

// - 코드배틀 비밀번호 및 게시된 문제의 타인 공유 / 무단 복제는 엄격히 금지됩니다.
// - 지원언어 : C++ / JAVA
// * 라이브러리 사용 불가


// 주어진 API를 이용하여 가장 많은 score를 얻을 수 있도록 doUserImplementation 함수를 작성하라. 동점자 간에는 query 함수가 적게 호출될 수록 유리하다.

// ※ Java인 경우 UserSolution 클래스의 doUserImplementation 메소드를 작성하라. 동점자 간에는 Solution.query 메소드가 적게 호출될 수록 유리하다.

 
// 함수 및 메소드 명

// 설명

// doUserImplementation(...)

// 각 테스트 케이스의 생각하는 수를 추측해서 맞추는 함수 또는 메소드

// UserSolution.doUserImplementation(...)

 

// API로 다음과 같이 제공된다.

// 함수 및 메소드 명

// 설명

// query(...)

// 각 테스트 케이스의 입력한 수와 비교해서 hit와 miss의 개수를 리턴하는 함수 또는 메소드
// Solution.query(...)




// [코드 작성 시 주의점]

// ① C 또는 C++로 답안을 작성하시는 응시자께서는 검정시스템에 제출 시,
//     Language에서 C++를 선택하신 후 제출해 주시기를 바랍니다.

// ② Main 부분과 User Code 부분으로 구성되어 있습니다.
//     A. Main 부분 : 수정할 수 없는 코드이며, 채점 시 주어지는 코드 그대로 사용됩니다.
//     B. User Code 부분 : 실제 응시자가 작성해야 하는 코드이며, 제출 시에는 코드 내에
//                               라이브러리 함수뿐 아니라 표준 입출력 함수도 포함되어서는 안됩니다.
//     C. 서버에서는 Main 부분과 User Code 부분은 별도의 파일로 분리되어 컴파일이 됩니다.
//         (main.cpp/solution.cpp 또는 Solution.java/UserSolution.java)

// ③ Local PC에서 프로그래밍할 시 유의 사항
//     A. 2개의 파일을 생성하셔야 합니다.
//        (main.cpp/solution.cpp 또는 Solution.java/UserSolution.java)
//     B. Main 부분의 코드를 main.cpp 또는 Solution.java에 복사해서 사용하시기 바랍니다.
//     C. sample_input.txt를 사용하시기 위해서는 Main 부분의 코드 내에 표준 입력을 파일로
//        전환하는 코드(주석처리 되어 있음)의 주석을 풀어서 사용하시면 됩니다.
//     D. User Code 부분의 코드를 작성하신 후 서버에 제출하실 때, 디버깅을 위한 라이브러리
//        함수뿐 아니라 표준 입출력 함수를 모두 삭제 또는 주석 처리해 주셔야 합니다.

// ④ 문제 내에 제약조건을 모두 명시하지 않으므로 주어지는 코드를 분석하셔야 합니다.

// ⑤ 코드는 개발 언어에 따라 상이할 수 있으므로, 작성할 언어를 기준으로 분석하셔야 합니다.



// [문제 설명]
// Main 부분으로 제공되는 main.cpp 또는 Solution.java 코드는 비밀번호 맞추기를 시도하는 코드이다.
// 비밀번호 맞추기는 다음과 같이 진행된다. 참가자와 시스템이 아래 과정을 진행한다.

// ① 비밀번호는 중복되지 않은 구성된 4 자리의 수로 구성된다.
//      (비밀번호의 각 자리 수는 0부터 시작할 수 있다.)
// ②  참가자는 중복되지 않는 숫자들로 구성된 4 자리의 수를 추측해서 입력할 수 있다.
//      (이 수를 입력하는 수라 하자. 입력하는 수 또한 0부터 시작할 수 있다.)
// ③ 시스템은 참가자가 입력한 비밀번호를 실제 비밀번호를 비교하여, hit(자리와 숫자 모두 일치함)와 miss(자리는 다르지만 숫자는 존재함)의 개수를 알려준다.
// ④ hit는 참가자가 입력한 수와 비밀번호가 같은 숫자를 가지고 있고 자리 위치까지 맞은 숫자의 개수이다.
// ⑤ miss는 참가자가 입력한 수와 비밀번호가 같은 숫자를 가지고 있지만 자리 위치는 서로 다른 숫자의 개수이다.
// ⑥ 만약 참가자가 입력한 수와 비밀번호가 일치하면 게임이 끝난다.
// ⑦ 만약 참가자가 입력한 수와 비밀번호가 일치하지 않으면 ②번으로 돌아가 과정들을 반복한다.

// 가령 예로, 비밀번호가 ‘1234'로 되어있다고 생각하자.

// 참가자가 ‘4139’으로 입력하면 시스템은 1 hit 2 miss라고 알려준다.
// ‘1234’와 ‘4139’를 비교하면 두 수 모두 가지고 있는 숫자들은 ‘1’과 ‘3’과 ‘4’이고 그 중에 자리 위치까지 맞은 숫자는 ‘3’이다.
// ‘1’과 ‘4’는 자리 위치가 서로 다르다.

// 참가자가 ‘2567’으로 입력하면 시스템은 0 hit 1 miss라 알려준다.
// ‘1234’와 ‘2567’을 비교하면 두 수 모두 가지고 있는 숫자는 ‘2’이고 자리 위치는 서로 다르다.

// 참가자가 ‘0768’으로 입력하면 시스템은 0 hit 0 miss라 알려준다.
// ‘1234’와 ‘0768’을 비교하면 두 수 모두 가지고 있는 숫자는 없다.

// 비밀번호는 각 테스트 케이스로 주어진다.

// query 함수를 이용하여 생각하는 수를 맞추도록 참가자에 해당하는 doUserImplementation 함수 또는 UserSolution.doUserImplementation 메소드를 구현하라.

// 만약 query 함수를 호출할 때 중복된 숫자가 있으면, 잘못된 질문으로 간주하고 hit와 miss가 각각 –1 값이 저장되어 리턴된다.

// 더 자세한 내용은 주어진 소스코드를 참조하라.



// [제약 사항]

// 1. 비밀번호는 4 자리의 수이다.
// 2. 비밀번호는 0부터 9까지 중복되지 않는 숫자로 이루어진다.
// 3. 비밀번호는 0부터 시작할 수 있다.
// 4. 각 테스트 케이스에서 query 함수의 호출한 횟수가 일정 수준 이하이고 생각하는 수와 guess 배열에 저장된 값이 일치하는 경우만 점수를 얻는다.
// 5. 동점자인 경우 query 함수를 호출한 총 횟수가 적을 수록 유리하다.
//  (Java인 경우 Solution.query 메소드를 호출한 총 횟수이다.)



// [입력]

// 입력 첫 줄에는 총 테스트 케이스 개수 T(1 ≤ T ≤ 50)가 주어진다.

// 그 다음 줄부터 테스트 케이스 T개가 온다. 각 테스트 케이스는 모두 1 줄로 구성되어 있다.

// 각 테스트 케이스의 첫 번째 줄에는 생각하는 수가 주어진다.



